name: Virtual Visits CI

on:
  push:
    paths-ignore:
      - "README.md"
      - "docs/**"

  pull_request:
    paths-ignore:
      - "README.md"
      - "docs/**"

jobs:
  # build-and-unit-tests:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 12

  #     - name: npm install ci
  #       run: npm ci

  #     - name: build
  #       run: npm run build

  #     - name: run unit tests
  #       run: npm run test

  # contract-tests:
  #   runs-on: ubuntu-latest

  #   services:
  #     # Remove after migration to MSSQL
  #     postgres:
  #       image: postgres:12
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: nhs-virtual-visit-test
  #       ports:
  #         - 5432:5432
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   if: (github.repository == 'madetech/nhs-virtual-visit')
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 12

  #     - name: npm install ci
  #       run: npm ci

  #     - name: Create .env file
  #       env:
  #         APP_ENV: test,test-mssql
  #         PG_TEST_DB_URL: ${{ secrets.PG_TEST_DB_URL }}
  #         MSQL_DB_DRIVER: ${{ secrets.MSQL_DB_DRIVER }}
  #         MSQL_DB_PORT: ${{ secrets.MSQL_DB_PORT }}
  #         MSQL_DB_POOL_MAX: ${{ secrets.MSQL_DB_POOL_MAX }}
  #         MSQL_DB_POOL_MIN: ${{ secrets.MSQL_DB_POOL_MIN }}
  #         MSQL_DB_POOL_IDLE_TIMEOUT: ${{ secrets.MSQL_DB_POOL_IDLE_TIMEOUT }}
  #         MSQL_TEST_DB_USER: ${{ secrets.MSQL_TEST_DB_USER }}
  #         MSQL_TEST_DB_PASSWORD: ${{ secrets.MSQL_TEST_DB_PASSWORD }}
  #         MSQL_TEST_DB_SERVER: ${{ secrets.MSQL_TEST_DB_SERVER }}
  #         MSQL_TEST_DB_NAME: ${{ secrets.MSQL_TEST_DB_NAME }}
  #         SMS_INITIAL_TEMPLATE_ID: ${{ secrets.SMS_INITIAL_TEMPLATE_ID }}
  #         SMS_JOIN_TEMPLATE_ID: ${{ secrets.SMS_JOIN_TEMPLATE_ID }}
  #         EMAIL_INITIAL_TEMPLATE_ID: ${{ secrets.EMAIL_INITIAL_TEMPLATE_ID }}
  #         EMAIL_JOIN_TEMPLATE_ID: ${{ secrets.EMAIL_JOIN_TEMPLATE_ID }}
  #       run: bin/write_environment.sh

  #     # Remove after migration to MSSQL
  #     - name: run pg data migration
  #       run: npm run dbmigratetest up

  #     - name: start mssql container
  #       run: bin/setup_test_mssql_docker.sh
  #       env:
  #         MSQL_DB_DRIVER: ${{ secrets.MSQL_DB_DRIVER }}
  #         MSQL_DB_PORT: ${{ secrets.MSQL_DB_PORT }}
  #         MSQL_DB_POOL_MAX: ${{ secrets.MSQL_DB_POOL_MAX }}
  #         MSQL_DB_POOL_MIN: ${{ secrets.MSQL_DB_POOL_MIN }}
  #         MSQL_DB_POOL_IDLE_TIMEOUT: ${{ secrets.MSQL_DB_POOL_IDLE_TIMEOUT }}
  #         MSQL_TEST_DB_USER: ${{ secrets.MSQL_TEST_DB_USER }}
  #         MSQL_TEST_DB_PASSWORD: ${{ secrets.MSQL_TEST_DB_PASSWORD }}
  #         MSQL_TEST_DB_SERVER: ${{ secrets.MSQL_TEST_DB_SERVER }}
  #         MSQL_TEST_DB_NAME: ${{ secrets.MSQL_TEST_DB_NAME }}

  #     - name: run contract tests
  #       run: npm run test:contract

  # e2e-tests:
  #   runs-on: ubuntu-latest

  #   services:
  #     # Remove after migration to MSSQL
  #     postgres:
  #       image: postgres:12
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: nhs-virtual-visit-test
  #       ports:
  #         - 5432:5432
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   if: (github.repository == 'madetech/nhs-virtual-visit')
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 12

  #     - name: npm install ci
  #       run: npm ci

  #     - name: Create .env file
  #       env:
  #         APP_ENV: test,test-mssql
  #         PG_TEST_DB_URL: ${{ secrets.PG_TEST_DB_URL }}
  #         MSQL_DB_DRIVER: ${{ secrets.MSQL_DB_DRIVER }}
  #         MSQL_DB_PORT: ${{ secrets.MSQL_DB_PORT }}
  #         MSQL_DB_POOL_MAX: ${{ secrets.MSQL_DB_POOL_MAX }}
  #         MSQL_DB_POOL_MIN: ${{ secrets.MSQL_DB_POOL_MIN }}
  #         MSQL_DB_POOL_IDLE_TIMEOUT: ${{ secrets.MSQL_DB_POOL_IDLE_TIMEOUT }}
  #         MSQL_TEST_DB_USER: ${{ secrets.MSQL_TEST_DB_USER }}
  #         MSQL_TEST_DB_PASSWORD: ${{ secrets.MSQL_TEST_DB_PASSWORD }}
  #         MSQL_TEST_DB_SERVER: ${{ secrets.MSQL_TEST_DB_SERVER }}
  #         MSQL_TEST_DB_NAME: ${{ secrets.MSQL_TEST_DB_NAME }}
  #         API_KEY: ${{ secrets.API_KEY }}
  #         EMAIL_INITIAL_TEMPLATE_ID: ${{ secrets.EMAIL_INITIAL_TEMPLATE_ID }}
  #         EMAIL_JOIN_TEMPLATE_ID: ${{ secrets.EMAIL_JOIN_TEMPLATE_ID }}
  #         EMAIL_UPDATED_VISIT_TEMPLATE_ID: ${{ secrets.EMAIL_UPDATED_VISIT_TEMPLATE_ID }}
  #         SMS_INITIAL_TEMPLATE_ID: ${{ secrets.SMS_INITIAL_TEMPLATE_ID }}
  #         SMS_JOIN_TEMPLATE_ID: ${{ secrets.SMS_JOIN_TEMPLATE_ID }}
  #         SMS_UPDATED_VISIT_TEMPLATE_ID: ${{ secrets.SMS_UPDATED_VISIT_TEMPLATE_ID }}
  #         JWT_SIGNING_KEY: ${{ secrets.JWT_SIGNING_KEY }}
  #         WHEREBY_API_KEY: ${{ secrets.WHEREBY_API_KEY }}
  #         WHEREBY_SUBDOMAIN: ${{ secrets.WHEREBY_SUBDOMAIN }}
  #         SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  #         SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  #         SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  #         SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  #         ENABLE_SENTRY: ${{ secrets.ENABLE_SENTRY }}
  #         ENABLE_UR_QUESTION: ${{ secrets.ENABLE_UR_QUESTION }}
  #       run: bin/write_environment.sh

  #     - name: start mssql container
  #       run: bin/setup_test_mssql_docker.sh
  #       env:
  #         MSQL_DB_DRIVER: ${{ secrets.MSQL_DB_DRIVER }}
  #         MSQL_DB_PORT: ${{ secrets.MSQL_DB_PORT }}
  #         MSQL_DB_POOL_MAX: ${{ secrets.MSQL_DB_POOL_MAX }}
  #         MSQL_DB_POOL_MIN: ${{ secrets.MSQL_DB_POOL_MIN }}
  #         MSQL_DB_POOL_IDLE_TIMEOUT: ${{ secrets.MSQL_DB_POOL_IDLE_TIMEOUT }}
  #         MSQL_TEST_DB_USER: ${{ secrets.MSQL_TEST_DB_USER }}
  #         MSQL_TEST_DB_PASSWORD: ${{ secrets.MSQL_TEST_DB_PASSWORD }}
  #         MSQL_TEST_DB_SERVER: ${{ secrets.MSQL_TEST_DB_SERVER }}
  #         MSQL_TEST_DB_NAME: ${{ secrets.MSQL_TEST_DB_NAME }}

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: "12.x"

  #     - name: Cypress run
  #       uses: cypress-io/github-action@v2
  #       with:
  #         build: npm run dbmigratetest up
  #         start: npm run test:server
  #       env:
  #         APP_ENV: test,test-mssql
  #         PG_TEST_DB_URL: ${{ secrets.PG_TEST_DB_URL }}
  #         JWT_SIGNING_KEY: ${{ secrets.JWT_SIGNING_KEY }}
  #         SMS_INITIAL_TEMPLATE_ID: ${{ secrets.SMS_INITIAL_TEMPLATE_ID }}
  #         SMS_JOIN_TEMPLATE_ID: ${{ secrets.SMS_JOIN_TEMPLATE_ID }}
  #         EMAIL_INITIAL_TEMPLATE_ID: ${{ secrets.EMAIL_INITIAL_TEMPLATE_ID }}
  #         EMAIL_JOIN_TEMPLATE_ID: ${{ secrets.EMAIL_JOIN_TEMPLATE_ID }}
  #         AZURE_FUNCTION_KEY: ${{ secrets.AZURE_FUNCTION_KEY }}
  #         AZURE_FUNCTION_URL: ${{ secrets.AZURE_FUNCTION_URL }}
  #         EVENT_LOGGING: ${{ secrets.ENABLE_EVENT_LOGGING_IN_TESTS }}

  # migration-tests:
  #   runs-on: ubuntu-latest

  #   services:
  #     # Remove after migration to MSSQL
  #     postgres:
  #       image: postgres:12
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: nhs-virtual-visit-test
  #       ports:
  #         - 5432:5432
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   if: (github.repository == 'madetech/nhs-virtual-visit')
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 12

  #     - name: npm install ci
  #       run: npm ci

  #     - name: Create .env file
  #       env:
  #         APP_ENV: test,test-mssql
  #         PG_TEST_DB_URL: ${{ secrets.PG_TEST_DB_URL }}
  #         MSQL_DB_DRIVER: ${{ secrets.MSQL_DB_DRIVER }}
  #         MSQL_DB_PORT: ${{ secrets.MSQL_DB_PORT }}
  #         MSQL_DB_POOL_MAX: ${{ secrets.MSQL_DB_POOL_MAX }}
  #         MSQL_DB_POOL_MIN: ${{ secrets.MSQL_DB_POOL_MIN }}
  #         MSQL_DB_POOL_IDLE_TIMEOUT: ${{ secrets.MSQL_DB_POOL_IDLE_TIMEOUT }}
  #         MSQL_TEST_DB_USER: ${{ secrets.MSQL_TEST_DB_USER }}
  #         MSQL_TEST_DB_PASSWORD: ${{ secrets.MSQL_TEST_DB_PASSWORD }}
  #         MSQL_TEST_DB_SERVER: ${{ secrets.MSQL_TEST_DB_SERVER }}
  #         MSQL_TEST_DB_NAME: ${{ secrets.MSQL_TEST_DB_NAME }}
  #       run: bin/write_environment.sh

  #     # Remove after migration to MSSQL
  #     - name: run pg data migration
  #       run: npm run dbmigratetest up

  #     - name: start mssql container
  #       run: bin/setup_test_mssql_docker.sh
  #       env:
  #         MSQL_DB_DRIVER: ${{ secrets.MSQL_DB_DRIVER }}
  #         MSQL_DB_PORT: ${{ secrets.MSQL_DB_PORT }}
  #         MSQL_DB_POOL_MAX: ${{ secrets.MSQL_DB_POOL_MAX }}
  #         MSQL_DB_POOL_MIN: ${{ secrets.MSQL_DB_POOL_MIN }}
  #         MSQL_DB_POOL_IDLE_TIMEOUT: ${{ secrets.MSQL_DB_POOL_IDLE_TIMEOUT }}
  #         MSQL_TEST_DB_USER: ${{ secrets.MSQL_TEST_DB_USER }}
  #         MSQL_TEST_DB_PASSWORD: ${{ secrets.MSQL_TEST_DB_PASSWORD }}
  #         MSQL_TEST_DB_SERVER: ${{ secrets.MSQL_TEST_DB_SERVER }}
  #         MSQL_TEST_DB_NAME: ${{ secrets.MSQL_TEST_DB_NAME }}

  #     - name: run migration tests
  #       run: npm run test:migration

  tag-and-release:
    runs-on: ubuntu-latest
    # needs: [contract-tests, build-and-unit-tests, migration-tests, e2e-tests]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node 12
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: npm install and build
        run: |
          npm install
          npm run build --if-present

      - name: Create Release Folder
        run: rsync -arv --exclude='.git/' --exclude='.github/' --exclude='.gitignore' --exclude='__mocks__/' --exclude='test/' --exclude='docs/' --exclude='docker/' --exclude='cypress' --exclude='contractTest/' --exclude='bin/' --exclude='db/' . ./release

      - name: Switch to Release Folder
        run: |
          cd release
          ls -la

      - name: Conventional Changelog Action
        uses: TriPSs/conventional-changelog-action@v3
        id: changelog
        with:
          github-token: ${{ secrets.github_token }}
          output-file: "CHANGELOG.md"

      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

  azure-build-and-deploy:
    needs: tag-and-release
    if: github.repository_owner == 'madetech'
    runs-on: ubuntu-latest

    steps:
      # checkout the repo
      - name: "Checkout Github Action"
        uses: actions/checkout@master

      - name: "Run Azure webapp deploy action using publish profile credentials"
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZUREAPPSERVICE_APP_NAME }}
          slot-name: ${{ secrets.AZUREAPPSERVICE_SLOT_NAME }}
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_1354ACBB1422489280969781D23BDAC6 }}
          package: release
